// import React from 'react';
// export default ({ data }) => <pre>{JSON.stringify(data, null, 2)}</pre>;

import React from 'react';
import { css } from '@emotion/react';

import Layout from '@mklabs/gatsby-theme-docs/src/components/Layout';
import SEO from '@mklabs/gatsby-theme-docs/src/components/SEO';
import slugify from '@mklabs/gatsby-theme-docs/src/util/slug';
import Image from "./image"
import { Link } from "gatsby"
import TableParams from './table-params';


const findXML = (node, name) => {
    return node.xml.find(item => item.name === name)
}

const isDelegate = (node) => {
    const params = findParams(node, "outputs")
    if (!params || !params.length) return false

    const first = params[0]
    if (!first || !first.children) return false

    const child = first.children[0]
    if (!child) return false;

    return child.content === "Output Delegate"
}

const GetVariableType = (node) => {
    const params = findParams(node, "outputs")
    if (!params || !params.length) return

    const first = params[0]
    if (!first || !first.children) return

    const type = first.children.find(child => child.name === "type")
    if (!type) return

    return type.content
}

// Filter out unwanted inputs (such as Exec and Target)
const findParams = (node, type) => {
    const inputs = node.xml.find(item => item.name === type.toLowerCase())
    if (!inputs) {
        return;
    }
    let { xmlChildren } = inputs;

    return xmlChildren.filter(xmlChild => {
        const isExec = xmlChild.children.find(child => child.name === "type" && child.content === "Exec");
        const isTarget = xmlChild.children.find(child => child.name === "name" && child.content === "Target");
        return !isExec && !isTarget;
    })
}

const findImage = (node, images) => {
    const imgNode = node.xml.find(item => item.name === "imgpath");
    const relativePath = imgNode.content.replace(/^\.\./, node.dirname)
    const img = images.find(({ node }) => node.parent.relativePath === relativePath)
    if (!img) console.log(node, images, relativePath)
    if (!img) {
        // TODO: for unknown reason, Set{Health, Stamina, Mana}Percentage images are not generated by KantanDoc
        return undefined;
    }
    return img.node.fixed;
}


const Docs = ({ data, pageContext }) => {
    const title = `${pageContext.classParent}`
    const description = `Generated API documentation for ${pageContext.classParent}`
    const slug = pageContext.slug
    const image = ""

    let members = data.members.edges
    const images = data.images.edges

    members.sort((a, b) => {
        const isDelegateA = isDelegate(a.node)
        const isDelegateB = isDelegate(b.node)

        if (isDelegateA && isDelegateB) return 0
        if (!isDelegateA && isDelegateB) return 1
        if (isDelegateA && !isDelegateB) return -1
    })

    members.sort((a, b) => {
        const typeA = findXML(a.node, `type`).content
        const typeB = findXML(b.node, `type`).content
        const isVariableA = typeA == "Variable"
        const isVariableB = typeB == "Variable"

        if (isVariableA && isVariableB) return 0
        if (!isVariableA && isVariableB) return 1
        if (isVariableA && !isVariableB) return -1
    })

    const variables = members.filter(({ node }) => {
        return findXML(node, `type`).content === "Variable"
    })

    const delegates = members.filter(({ node }) => {
        return isDelegate(node)
    })

    const nodes = members.filter(({ node }) => {
        return findXML(node, `type`).content === "Node" && !isDelegate(node)
    })

    const headings = members.map(({ node }) => ({
        depth: 2,
        value: node.name
    }))

    return (
        <>
            <SEO title={title} description={description} slug={slug} image={image} />
            <Layout
                disableTableOfContents={false}
                title={title}
                headings={headings}
            >

                <h2>Properties</h2>
                {variables.map(({ node }) => (
                    <div key={node.name}>
                        <div css={css`padding-bottom: 24px;`}>
                            <h3 id={slugify(node.name)}>{node.name}</h3>
                            <p>
                                {findXML(node, `description`).content}
                            </p>

                            <p css={css`color: #ACA599; margin-bottom: 0; font-style: italic`}>{GetVariableType(node)}</p>
                        </div>

                        <hr />
                    </div>
                ))}


                <h2>Events</h2>
                {delegates.map(({ node }) => (
                    <div key={node.name}>
                        <div css={css`padding-bottom: 24px;`}>
                            <h3 id={slugify(node.name)}>{node.name}</h3>
                            <p>
                                {findXML(node, `description`).content}
                            </p>

                            <Image fixed={findImage(node, images)} />
                            <TableParams node={node} type="Inputs" />
                            <TableParams node={node} type="Outputs" />
                        </div>

                        <hr />
                    </div>
                ))}

                <h2>Functions</h2>
                {nodes.map(({ node }) => (
                    <div key={node.name}>
                        <div css={css`padding-bottom: 24px;`}>
                            <h3 id={slugify(node.name)}>{node.name}</h3>
                            <p>
                                {findXML(node, `description`).content}
                            </p>

                            <Image fixed={findImage(node, images)} />
                            <TableParams node={node} type="Inputs" />
                            <TableParams node={node} type="Outputs" />
                        </div>

                        <hr />
                    </div>
                ))}

                <p css={css`margin: 48px 0; text-align: center; font-style: italic`}>
                    API documentation generated thanks to <Link to="http://kantandev.com/free/kantan-doc-gen">Kantan Doc Gen</Link>
                </p>

            </Layout>
        </>
    );
}

export default Docs